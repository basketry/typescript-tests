/**
 * This code was generated by @basketry/typescript@0.1.0-rc.0
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 *
 * To make changes to the contents of this file:
 * 1. Edit ../../wealthvp/rest-api/src/schema.oas3.json
 * 2. Run the Basketry CLI
 *
 * About Basketry: https://github.com/basketry/basketry/wiki
 * About @basketry/typescript: https://github.com/basketry/typescript#readme
 */

export interface UserService {
  /**
   * Creates a user
   */
  createUser(params: {
    /**
     * The new user
     */
    user: NewUser;
  }): Promise<UserResponse>;

  /**
   * Gets a user
   */
  getUser(params: {
    /**
     * A user ID
     */
    userId: string;
  }): Promise<UserResponse>;

  /**
   * Gets users
   */
  getUsers(params?: {
    /**
     * The number of items to return after the supplied cursor, or from the start of the set if no cursor is supplied.
     */
    first?: number;

    /**
     * A cursor
     */
    after?: string;

    /**
     * The number of items to return before the supplied cursor, or from the end of the set if no cursor is supplied.
     */
    last?: number;

    /**
     * A cursor
     */
    before?: string;
  }): Promise<UsersResponse>;

  /**
   * Removes a user
   */
  removeUser(params: {
    /**
     * A user ID
     */
    userId: string;
  }): Promise<UserResponse>;

  /**
   * Updates a user
   */
  updateUser(params: {
    /**
     * The user update
     */
    user: UserUpdate;

    /**
     * A user ID
     */
    userId: string;
  }): Promise<UserResponse>;
}

export type ErrorCode =
  | 'BAD_PARAMETER'
  | 'BAD_REQUEST'
  | 'FORBIDDEN'
  | 'NOT_FOUND'
  | 'INTERNAL_SERVER_ERROR';

/**
 * A standard error
 */
export type Error = {
  /**
   * A unique identifier for this particular occurrence of the problem.
   */
  id?: string;

  /**
   * An application-specific error code, expressed as a string value
   */
  code: ErrorCode;

  /**
   * The HTTP status code applicable to this problem.
   */
  status: number;

  /**
   * A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.
   */
  title?: string;

  /**
   * a human-readable explanation specific to this occurrence of the problem. Like `title`, this fieldâ€™s value can be localized.
   */
  detail?: string;

  /**
   * A JSON Pointer (RFC6901) to the associated entity in the request document (e.g. `/data` for a primary data object, or `/data/attributes/title` for a specific attribute).
   */
  pointer?: string;

  /**
   * A string indicating which method parameter caused the error.
   */
  parameter?: string;
};

/**
 * A user
 */
export type NewUser = {
  /**
   * Absolute URI to an image
   */
  avatarUri?: string;

  /**
   * The name or nickname the user prefers which may differ from their given legal first name
   */
  preferredFirstName?: string;

  /**
   * The user's given legal first name
   */
  legalFirstName: string;

  /**
   * The user's given legal last name
   */
  lastName: string;
};

/**
 * Implements the [GraphQL Cursor Connection Specification](https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo) Page Info obejct.
 */
export type PageInfo = {
  /**
   * Indicates whether more items exist prior to the set defined by the client's arguments.
   */
  hasPreviousPage: boolean;

  /**
   * Indicates whether more items exist following the set defined by the client's arguments.
   */
  hasNextPage: boolean;

  /**
   * Cursor corresponding to the first item in the resulting set if any items were returned; otherwise, undefined
   */
  startCursor?: string;

  /**
   * Cursor corresponding to the last item in the resulting set if any items were returned; otherwise, undefined
   */
  endCursor?: string;
};

/**
 * A user
 */
export type User = {
  /**
   * Unique, non-sequential identifier for this user
   */
  id: string;

  /**
   * Absolute URI to an image
   */
  avatarUri?: string;

  /**
   * The name or nickname the user prefers which may differ from their given legal first name
   */
  preferredFirstName: string;

  /**
   * The user's given legal first name
   */
  legalFirstName: string;

  /**
   * The user's given legal last name
   */
  lastName: string;

  /**
   * The combined preferred first name and last name
   */
  preferredFullName: string;

  /**
   * The combined legal first name and last name
   */
  legalFullName: string;
};

/**
 * A response that contains a single user
 */
export type UserResponse = {
  /**
   * A user
   */
  data?: User;

  /**
   * Any errors produced during method execution
   */
  errors: Error[];
};

/**
 * A response that contains a single user
 */
export type UsersResponse = {
  /**
   * Any errors produced during method execution
   */
  data: User[];

  /**
   * Any errors produced during method execution
   */
  errors: Error[];

  /**
   * Implements the [GraphQL Cursor Connection Specification](https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo) Page Info obejct.
   */
  pageInfo: PageInfo;
};

/**
 * A user
 */
export type UserUpdate = {
  /**
   * Absolute URI to an image
   */
  avatarUri?: string;

  /**
   * The name or nickname the user prefers which may differ from their given legal first name
   */
  preferredFirstName?: string;

  /**
   * The user's given legal first name
   */
  legalFirstName?: string;

  /**
   * The user's given legal last name
   */
  lastName?: string;
};
