/**
 * This code was generated by @basketry/typescript-tests@{{version}}
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 *
 * To make changes to the contents of this file:
 * 1. Edit service.json
 * 2. Run the Basketry CLI
 *
 * About Basketry: https://github.com/basketry/basketry/wiki
 * About @basketry/typescript-tests: https://github.com/basketry/typescript-tests#readme
 */

import * as types from './types';
import * as testHelpers from './test-helpers';

export function testUserService(service: types.UserService) {
  describe('UserService', () => {
    describe('createUser', () => {
      let params: NonNullable<Parameters<types.UserService['createUser']>[0]>;
      beforeEach(() => {
        params = {
          user: {
            legalFirstName: ' %e',
            lastName: '1Mn?0',
          },
        };
      });

      describe('user', () => {
        it('returns an error when is not provided', async () => {
          params.user = undefined as any;
          const result = await service.createUser(params);
          expect(result.errors).toEqual(
            expect.arrayContaining([
              expect.objectContaining({ code: 'BAD_PARAMETER', status: 400 }),
            ]),
          );
        });
      });
    });

    describe('getUser', () => {
      let params: NonNullable<Parameters<types.UserService['getUser']>[0]>;
      beforeEach(() => {
        params = {
          userId: 'EvflQTU}',
        };
      });

      describe('userId', () => {
        it('returns an error when is not provided', async () => {
          params.userId = undefined as any;
          const result = await service.getUser(params);
          expect(result.errors).toEqual(
            expect.arrayContaining([
              expect.objectContaining({ code: 'BAD_PARAMETER', status: 400 }),
            ]),
          );
        });

        it('returns an error when a number', async () => {
          params.userId = 2836 as any;
          const result = await service.getUser(params);
          expect(result.errors).toEqual(
            expect.arrayContaining([
              expect.objectContaining({ code: 'BAD_PARAMETER', status: 400 }),
            ]),
          );
        });

        it('returns an error when a boolean', async () => {
          params.userId = true as any;
          const result = await service.getUser(params);
          expect(result.errors).toEqual(
            expect.arrayContaining([
              expect.objectContaining({ code: 'BAD_PARAMETER', status: 400 }),
            ]),
          );
        });
      });
    });

    describe('getUsers', () => {
      let params: NonNullable<Parameters<types.UserService['getUsers']>[0]>;
      beforeEach(() => {
        params = {};
      });

      describe('first', () => {
        it('returns an error when less than 0', async () => {
          params.first = -1 as any;
          const result = await service.getUsers(params);
          expect(result.errors).toEqual(
            expect.arrayContaining([
              expect.objectContaining({ code: 'BAD_PARAMETER', status: 400 }),
            ]),
          );
        });

        it('returns an error when greater than 100', async () => {
          params.first = 101 as any;
          const result = await service.getUsers(params);
          expect(result.errors).toEqual(
            expect.arrayContaining([
              expect.objectContaining({ code: 'BAD_PARAMETER', status: 400 }),
            ]),
          );
        });

        it('returns an error when a string', async () => {
          params.first = '9X>.w=wvn2' as any;
          const result = await service.getUsers(params);
          expect(result.errors).toEqual(
            expect.arrayContaining([
              expect.objectContaining({ code: 'BAD_PARAMETER', status: 400 }),
            ]),
          );
        });

        it('returns an error when a decimal', async () => {
          params.first = 70.25434616953135 as any;
          const result = await service.getUsers(params);
          expect(result.errors).toEqual(
            expect.arrayContaining([
              expect.objectContaining({ code: 'BAD_PARAMETER', status: 400 }),
            ]),
          );
        });

        it('returns an error when a boolean', async () => {
          params.first = true as any;
          const result = await service.getUsers(params);
          expect(result.errors).toEqual(
            expect.arrayContaining([
              expect.objectContaining({ code: 'BAD_PARAMETER', status: 400 }),
            ]),
          );
        });
      });

      describe('after', () => {
        it('returns an error when a number', async () => {
          params.after = 4008 as any;
          const result = await service.getUsers(params);
          expect(result.errors).toEqual(
            expect.arrayContaining([
              expect.objectContaining({ code: 'BAD_PARAMETER', status: 400 }),
            ]),
          );
        });

        it('returns an error when a boolean', async () => {
          params.after = false as any;
          const result = await service.getUsers(params);
          expect(result.errors).toEqual(
            expect.arrayContaining([
              expect.objectContaining({ code: 'BAD_PARAMETER', status: 400 }),
            ]),
          );
        });
      });

      describe('last', () => {
        it('returns an error when less than 0', async () => {
          params.last = -1 as any;
          const result = await service.getUsers(params);
          expect(result.errors).toEqual(
            expect.arrayContaining([
              expect.objectContaining({ code: 'BAD_PARAMETER', status: 400 }),
            ]),
          );
        });

        it('returns an error when greater than 100', async () => {
          params.last = 101 as any;
          const result = await service.getUsers(params);
          expect(result.errors).toEqual(
            expect.arrayContaining([
              expect.objectContaining({ code: 'BAD_PARAMETER', status: 400 }),
            ]),
          );
        });

        it('returns an error when a string', async () => {
          params.last = 'AVd0ps<E}A' as any;
          const result = await service.getUsers(params);
          expect(result.errors).toEqual(
            expect.arrayContaining([
              expect.objectContaining({ code: 'BAD_PARAMETER', status: 400 }),
            ]),
          );
        });

        it('returns an error when a decimal', async () => {
          params.last = 71.50565676856786 as any;
          const result = await service.getUsers(params);
          expect(result.errors).toEqual(
            expect.arrayContaining([
              expect.objectContaining({ code: 'BAD_PARAMETER', status: 400 }),
            ]),
          );
        });

        it('returns an error when a boolean', async () => {
          params.last = false as any;
          const result = await service.getUsers(params);
          expect(result.errors).toEqual(
            expect.arrayContaining([
              expect.objectContaining({ code: 'BAD_PARAMETER', status: 400 }),
            ]),
          );
        });
      });

      describe('before', () => {
        it('returns an error when a number', async () => {
          params.before = 4101 as any;
          const result = await service.getUsers(params);
          expect(result.errors).toEqual(
            expect.arrayContaining([
              expect.objectContaining({ code: 'BAD_PARAMETER', status: 400 }),
            ]),
          );
        });

        it('returns an error when a boolean', async () => {
          params.before = false as any;
          const result = await service.getUsers(params);
          expect(result.errors).toEqual(
            expect.arrayContaining([
              expect.objectContaining({ code: 'BAD_PARAMETER', status: 400 }),
            ]),
          );
        });
      });
    });

    describe('removeUser', () => {
      let params: NonNullable<Parameters<types.UserService['removeUser']>[0]>;
      beforeEach(() => {
        params = {
          userId: 'KPL,AF',
        };
      });

      describe('userId', () => {
        it('returns an error when is not provided', async () => {
          params.userId = undefined as any;
          const result = await service.removeUser(params);
          expect(result.errors).toEqual(
            expect.arrayContaining([
              expect.objectContaining({ code: 'BAD_PARAMETER', status: 400 }),
            ]),
          );
        });

        it('returns an error when a number', async () => {
          params.userId = 9443 as any;
          const result = await service.removeUser(params);
          expect(result.errors).toEqual(
            expect.arrayContaining([
              expect.objectContaining({ code: 'BAD_PARAMETER', status: 400 }),
            ]),
          );
        });

        it('returns an error when a boolean', async () => {
          params.userId = true as any;
          const result = await service.removeUser(params);
          expect(result.errors).toEqual(
            expect.arrayContaining([
              expect.objectContaining({ code: 'BAD_PARAMETER', status: 400 }),
            ]),
          );
        });
      });
    });

    describe('updateUser', () => {
      let params: NonNullable<Parameters<types.UserService['updateUser']>[0]>;
      beforeEach(() => {
        params = {
          user: {},
          userId: ' ;$RqG4z',
        };
      });

      describe('user', () => {
        it('returns an error when is not provided', async () => {
          params.user = undefined as any;
          const result = await service.updateUser(params);
          expect(result.errors).toEqual(
            expect.arrayContaining([
              expect.objectContaining({ code: 'BAD_PARAMETER', status: 400 }),
            ]),
          );
        });
      });

      describe('userId', () => {
        it('returns an error when is not provided', async () => {
          params.userId = undefined as any;
          const result = await service.updateUser(params);
          expect(result.errors).toEqual(
            expect.arrayContaining([
              expect.objectContaining({ code: 'BAD_PARAMETER', status: 400 }),
            ]),
          );
        });

        it('returns an error when a number', async () => {
          params.userId = 2474 as any;
          const result = await service.updateUser(params);
          expect(result.errors).toEqual(
            expect.arrayContaining([
              expect.objectContaining({ code: 'BAD_PARAMETER', status: 400 }),
            ]),
          );
        });

        it('returns an error when a boolean', async () => {
          params.userId = false as any;
          const result = await service.updateUser(params);
          expect(result.errors).toEqual(
            expect.arrayContaining([
              expect.objectContaining({ code: 'BAD_PARAMETER', status: 400 }),
            ]),
          );
        });
      });
    });
  });
}
